// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package llmquery


object LambdaLlmQueryGrpc {
  val METHOD_GENERATE_TEXT: _root_.io.grpc.MethodDescriptor[llmquery.LambdaLlmRequest, llmquery.LambdaLlmResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("LambdaLlmQuery", "generateText"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[llmquery.LambdaLlmRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[llmquery.LambdaLlmResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(llmquery.LlmqueryProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("LambdaLlmQuery")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(llmquery.LlmqueryProto.javaDescriptor))
      .addMethod(METHOD_GENERATE_TEXT)
      .build()
  
  /** LLM service definition
    */
  trait LambdaLlmQuery extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[LambdaLlmQuery] = LambdaLlmQuery
    /** Generates a response to a prompt
      */
    def generateText(request: llmquery.LambdaLlmRequest): scala.concurrent.Future[llmquery.LambdaLlmResponse]
  }
  
  object LambdaLlmQuery extends _root_.scalapb.grpc.ServiceCompanion[LambdaLlmQuery] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[LambdaLlmQuery] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = llmquery.LlmqueryProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = llmquery.LlmqueryProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: LambdaLlmQuery, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_GENERATE_TEXT,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: llmquery.LambdaLlmRequest, observer: _root_.io.grpc.stub.StreamObserver[llmquery.LambdaLlmResponse]) => {
          serviceImpl.generateText(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /** LLM service definition
    */
  trait LambdaLlmQueryBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[LambdaLlmQuery] = LambdaLlmQuery
    /** Generates a response to a prompt
      */
    def generateText(request: llmquery.LambdaLlmRequest): llmquery.LambdaLlmResponse
  }
  
  class LambdaLlmQueryBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[LambdaLlmQueryBlockingStub](channel, options) with LambdaLlmQueryBlockingClient {
    /** Generates a response to a prompt
      */
    override def generateText(request: llmquery.LambdaLlmRequest): llmquery.LambdaLlmResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GENERATE_TEXT, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): LambdaLlmQueryBlockingStub = new LambdaLlmQueryBlockingStub(channel, options)
  }
  
  class LambdaLlmQueryStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[LambdaLlmQueryStub](channel, options) with LambdaLlmQuery {
    /** Generates a response to a prompt
      */
    override def generateText(request: llmquery.LambdaLlmRequest): scala.concurrent.Future[llmquery.LambdaLlmResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GENERATE_TEXT, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): LambdaLlmQueryStub = new LambdaLlmQueryStub(channel, options)
  }
  
  object LambdaLlmQueryStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[LambdaLlmQueryStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): LambdaLlmQueryStub = new LambdaLlmQueryStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[LambdaLlmQueryStub] = this
  }
  
  def bindService(serviceImpl: LambdaLlmQuery, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = LambdaLlmQuery.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): LambdaLlmQueryBlockingStub = new LambdaLlmQueryBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): LambdaLlmQueryStub = new LambdaLlmQueryStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = llmquery.LlmqueryProto.javaDescriptor.getServices().get(0)
  
}